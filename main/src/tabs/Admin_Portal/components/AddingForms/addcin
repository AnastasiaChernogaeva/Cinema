<template>
         <form class="card" @submit.prevent="onSubmit"  >  
        <div :class="['form-control', {'invalid':cityError},]"> 
                <label for="filmName">Город</label>
                <input
                    type="text"
                    id="city"
                    v-model="city"
                    @blur="cityBlur"
                >
                <small v-if="cityError">{{cityError}}</small>
      </div>

        <div :class="['form-control', {'invalid':Error},]"> 
                <label for="cinemaName">Название кинотеатра</label>
                <input
                    type="text"
                    id="cinemaName"
                    v-model="cinemaName"
                    @blur="cinemaBlur"
                >
                <small v-if="cinemaError">{{cinemaError}}</small>
  </div>

  
  <div :class="['form-control', {'invalid':hallamountsError},]"> 
                <label for="hallamounts">Количество залов</label>
                <input
                    type="number"
                    id="hallamounts"
                    v-model="hallamounts"
                    @blur="hallamountsBlur"
                >
                 <small v-if="hallamountsError">{{hallamountsError}}</small>
  </div> 

  <div v-if="hallamounts!==0">
      <div v-for="(el,idx) in hallamounts" :key="idx">
          <!-- <h2>План зала {{el}}</h2> -->
  <hall-form  :id="el" @hall="newHall"></hall-form>
      </div>
    <!-- <div v-if="open ===true"><hall-form v-for="(el,idx) in hallamounts" :key="idx" :id="el" @hall="newHall"></hall-form></div> -->
    <!-- <div v-if="open === true">
<div class="form-control" v-for="(el,idx) in hallamounts" :key="idx">
            <h2>План зала {{el}}</h2>
  <div class="form-control">
        <label for="rows">Количество рядов</label>
          <input
                type="number"
                id="rows"
                v-model="rows"
                @blur="rowsBlur"
        >
  </div>
  <div class="form-control">
        <label for="places">Количество мест в одном ряду </label>
          <input
                type="number"
                id="places"
                v-model="places"
                @blur="placesBlur"
        >
    </div>
        <div class="form-checkbox">

            <span class="label">Выберите номера рядов с обычными местами</span>

            <div class="checkbox" v-for="(row, idx) in rows" :key="idx">
                <label><input type="checkbox" name="simplePl" v-model="simplePl" value="row"/>{{row}}</label>
            </div>
        </div>

        <div class="form-checkbox">

            <span class="label">Выберите номера рядов с VIP местами</span>

            <div class="checkbox" v-for="(row, idx) in rows" :key="idx">
                <label><input type="checkbox" name="vipPl" v-model="vipPl" value="row"/>{{row}}</label>
            </div>
        </div>

        <div class="form-checkbox">

            <span class="label">Выберите номера рядов с местами для двоих</span>

            <div class="checkbox" v-for="(row, idx) in rows" :key="idx">
                <label><input type="checkbox" name="couplePl" v-model="couplePl" value="row"/>{{row}}</label>
            </div>
        </div>
           <button class="btn" @click="open === false">Сохранить зал {{el}}</button> 
</div> 
</div> -->
    <!-- <canvas-halls v-if="isReadyHall" :info="hallForm"></canvas-halls> -->
</div>


         

            <button class="btn primary" type="submit" :disabled="isSubmitting || tooManyAttemptsAmount" >Добавить</button>      

        </form> 
</template>
<script>
import {ref,reactive, watch} from "vue"
import { useStore } from 'vuex';
import { useCinemasForms } from "../../use/cinemas-forms";
import CanvasHalls from "../../canvas/CanvasHalls.vue"
import HallForm from "../../ui/HallForm.vue"


export default {
    components:{
        CanvasHalls,
        HallForm,
    },
    emits:['added'],
    setup( _, {emit},){
        const store = useStore()
        // const isReadyHallc = ref(false)
        // const rows = ref()
        // const places = ref()
        // const simplePl = reactive([])
        // const vipPl = reactive([])
        // const couplePl = reactive([])
        const hallForm = reactive({})

        
        const submit = async values =>{
            const v = {...values, ...hallForm}
            // console.log(v);
            await store.dispatch('requests/create', {'value':v, 'rType':'cinemas',});
            // console.log(v);
            emit('added')
        } 

        const newHall = (res) =>{
            // console.log(res.value.id)
            hallForm[`id${res.value.id}`] = res.value.val
            // console.log(hallForm);
            // isReadyHall.value = true
        }

        // watch(['rows', 'places', 'simplePl', 'vipPl', 'couplePl',], values=>{
        //     console.log(values)
            // {
            //     val:{
            //         rows:values[0],
            //         places:values[1],
            //         simplePl:values[2],
            //         vipPl:values[3],
            //         couplePl:values[4],
            //     },     
            // }
            // console.log(id)
            // info = {
            //         rows:values[0],
            //         places:values[1],
            //         simplePl:values[2],
            //         vipPl:values[3],
            //         couplePl:values[4],
            //     }
            // console.log(values)
        // }
        // )




        return{
            // rows,
            // places,
            // simplePl,
            // vipPl,
            // couplePl,
            ...useCinemasForms(submit),
            // open
            newHall,
            // isReadyHallc,
            hallForm
        }
       
    }

}
</script>

<style>

</style>