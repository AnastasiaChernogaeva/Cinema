<template>
  <div class="card container" v-if="sessions.length!=0">
        <div class="button-filter" v-for="(city, idx) of cities" :key = "idx">
            <button class="btn" @click="findCity(city)">
                {{city}}
            </button>
        </div>

     <h1>Сеансы&nbsp;{{searchWord?`по поиску "${searchWord}"`:null}}:</h1>
     <div class="session container" v-for="(session, idx) of searchFilms?searchFilms:sessions" :key="idx">
         <h3>{{session.sessionFilmName}}</h3>
              <ul>
                  <!-- <li><b>фильм в показе:</b>&nbsp;{{films.find(film=>film.filmName===session.sessionFilmName).startTime}}-{{films.find(film=>film.filmName===session.sessionFilmName).finishTime}}</li> -->
                  <li><b>город:</b>&nbsp;{{session.cityName}}</li>
                  <li>
                      <!-- <router-link class="insideIfo" v-slot="{navigate}" custom :to="{name:'ccinema', params:{idc:cinemas&&cinemas.find(cinema=>{
                      if(cinema && cinema.cinemaName===session.chosenCinemaName) return cinema}).id}}"> -->
                         <router-link class="insideIfo" v-slot="{navigate}" custom :to="{name:'ccinema', params:{idc:foundNeededId(session.chosenCinemaName)}}">
                      <b>кинотеатр:</b>&nbsp;<span @click="navigate">{{session.chosenCinemaName}}</span></router-link></li>
                  <li><router-link class="insideIfo" v-slot="{navigate}" custom :to="{name:'csession', params:{ids:session.id}}"><b>время показа:</b>&nbsp;<span @click="navigate">{{session.startSessionTime}}</span></router-link></li>
              </ul>
              
     </div>
     <a href="#" @click="comeBackToAllSessions" v-if="searchFilms"> Показать все сеансы </a>
  </div> 
</template>

<script>
// добавить валидацию + сделать поиск по слову!!!

import {onMounted, ref, computed, watch} from "vue"
import { useStore } from 'vuex'
import AppLoader from '../../../Admin_Portal/ui/AppLoader.vue'

export default {
    props:['search'],
    components:{
         AppLoader,
    },
    setup(props){

        const store = useStore()
        const loading = ref(false)
        const searchWord = ref()



      onMounted( async()=>{
                loading.value = true 
                await store.dispatch('gettingInfo/loadAll',['cinemas','films','sessions'])
                loading.value = false
            },  
      
    )

                const foundNeededId = (word)=>{
                //    return cinemas.value.find(cinema=>{
                //       if( cinema.cinemaName===word) return cinema}).id
                }



                const cities = ref([])
                const sessions = computed(()=> store.getters['gettingInfo/sessions'])
                const cinemas = computed(()=> store.getters['gettingInfo/cinemas'])
                const films = computed(()=> store.getters['gettingInfo/films']
                    .filter(film=>{
                    return film.finishTime>Date.now()}))
           watch(()=>sessions.value,()=>{
                if(sessions.value){
                    cities.value = [... new Set( sessions.value.map(session=> session.cityName))]
                }

           }) 

        const searchFilms = ref()

        watch(()=>props.search,()=>{
            searchWord.value = props.search
            searchFilms.value = sessions.value.filter(session=>{if(session.sessionFilmName.includes(searchWord.value ))return session})
            // console.log(props.search);
            // console.log(searchFilms.value);
            if(searchFilms.value){
                cities.value = [... new Set( searchFilms.value.map(session=> session.cityName))]
            }
            else{
                cities.value = [... new Set( sessions.value.map(session=> session.cityName))]
            } 
        })
        watch(()=>searchFilms.value, ()=>{
            if(searchFilms.value){
                cities.value = [... new Set( searchFilms.value.map(session=> session.cityName))]
            }
            else{
                cities.value = [... new Set( sessions.value.map(session=> session.cityName))]
            } 
        })

        // const citySession = ref()

        const findCity = (ev)=>{
            if(searchFilms.value){
                searchFilms.value = searchFilms.value.filter(session=>{
                                if(session.cityName===ev){
                                    return session
                                }
                            })
            }
            else{
                searchFilms.value = sessions.value.filter(session=>{
                                if(session.cityName===ev){
                                    return session
                                }
                            })
            }
            
        }

      
        const comeBackToAllSessions = () =>{
            searchFilms.value = null
            searchWord.value = null
        }

        return{
            loading,
            sessions,
            cinemas,
            films,
            searchFilms,
            searchWord,
            comeBackToAllSessions,
            foundNeededId,
            findCity,
            // citySession,
            cities
        }
        
    }}
</script>

<style scoped>
.button-filter{
    display:inline-flex;
    justify-content:stretch;
}
.session{
    display:flex;
    justify-content: flex-start;
}
.session h3{
    width: 50%;
}

.search{
    border: 2px solid black;
}
.card{
    padding-left:10%;
}
    li{
        list-style-type: none;   
    }
    .arrow{
        font-size: 20px;
        background:rgba(0, 0, 0, 0.096);
        border:none;
        width:50px;
        height:50px;
        border-radius:50%;
        position:absolute;
        top:40%;
        z-index:70;
        border:1px solid white;
        display:block;
    }
    button.arrow.forward {
       right: 30px;
    }
    button.arrow.back {
       left: 30px;
    }
   .filmBlock{
       /* width:25%;
       height:auto;
       display: inline-block; */
    /* margin-bottom: 8px;
    position: relative;
    display: block; */
    width: 20%;
    height: 300px;
    text-align: center;
    display: inline-flex;
    /* border: chocolate 3px solid; */
    justify-content: space-around;
   }
      
    img{
        width: 200px;
        height: auto;
        z-index:15;

    /* width: 100%;
    height: auto;
    vertical-align: bottom;
    border-radius: 4px; */
   } 
   .infoAbout{
       display: none;
   }
   .filmBlock:hover{
       background:rgba(0, 0, 0, 0.719);
       cursor: pointer;
       z-index:25;
   }
   /* .filmBlock:hover .arrow{
       display:none;
   } */
   .filmBlock:hover .infoAbout{
       display: block;
       width: 200px;
       height: 300px;
       color:white;
       font-size:15px;
       position: absolute;
       background:rgba(0, 0, 0, 0.719);
       z-index:35;
   }

</style>